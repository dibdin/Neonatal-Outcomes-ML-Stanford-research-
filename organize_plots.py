#!/usr/bin/env python3
"""
Script to organize plots into a structured directory layout.
"""

import os
import shutil
import glob
from pathlib import Path

def create_directory_structure():
    """Create the directory structure for organizing plots."""
    
    # Main directories
    main_dirs = [
        'outputs/plots/gestational_age',
        'outputs/plots/birth_weight'
    ]
    
    # Subdirectories for each main directory
    subdirs = [
        'performance_metrics',
        'roc_curves', 
        'scatter_plots',
        'biomarker_frequency',
        'biomarker_frequency_cordvsheel',
        'summary_plots'
    ]
    
    # Create all directories
    for main_dir in main_dirs:
        for subdir in subdirs:
            Path(f"{main_dir}/{subdir}").mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ Directory structure created successfully!")

def organize_plots():
    """Organize plots into the appropriate directories."""
    
    base_dir = "outputs/plots/"
    # Map keywords to subfolders
    folder_map = [
        # Gestational Age
        ("gestational_age", "gestational_age"),
        ("preterm_classification", "gestational_age"),
        # Birth Weight
        ("birth_weight", "birth_weight"),
        ("sga_classification", "birth_weight"),
    ]
    plot_types = [
        ("performance_metrics", ["metrics_with_ci"]),
        ("roc_curves", ["roc_curve"]),
        ("scatter_plots", ["true_vs_predicted_scatter"]),
        ("biomarker_frequency_cordvsheel", ["heel_vs_cord_biomarker_frequency"]),
        ("biomarker_frequency", ["biomarker_frequency"]),
        ("summary_plots", ["summary_"])
    ]
    moved_count = 0
    files = [f for f in os.listdir(base_dir) if os.path.isfile(os.path.join(base_dir, f)) and f != "README.md"]
    for filename in files:
        target_main = None
        for key, folder in folder_map:
            if key in filename:
                target_main = folder
                break
        target_type = None
        for plot_folder, type_keys in plot_types:
            if any(tk in filename for tk in type_keys):
                # Special case: biomarker_frequency_cordvsheel must match only if 'heel_vs_cord' in name
                if plot_folder == "biomarker_frequency_cordvsheel" and "heel_vs_cord" not in filename:
                    continue
                # Special case: biomarker_frequency should not match 'heel_vs_cord'
                if plot_folder == "biomarker_frequency" and "heel_vs_cord" in filename:
                    continue
                target_type = plot_folder
                break
        if target_main and target_type:
            target_dir = os.path.join(base_dir, target_main, target_type)
        elif target_main:
            target_dir = os.path.join(base_dir, target_main, "other")
        else:
            target_dir = os.path.join(base_dir, "other")
        os.makedirs(target_dir, exist_ok=True)
        src = os.path.join(base_dir, filename)
        dst = os.path.join(target_dir, filename)
        try:
            if os.path.exists(dst):
                os.remove(dst)
            shutil.move(src, dst)
            moved_count += 1
            print(f"‚úÖ Moved: {filename} ‚Üí {target_dir}")
        except Exception as e:
            print(f"‚ùå Error moving {filename}: {e}")
    print(f"\nüéâ Organization complete! Moved {moved_count} files.")

def create_readme():
    """Create a README file explaining the organization."""
    
    readme_content = """# Plot Organization

This directory contains all plots generated by the machine learning pipeline, organized by analysis type and plot category.

## Directory Structure

### Gestational Age Analysis (`gestational_age/`)
- **performance_metrics/**: MAE, RMSE, and AUC plots with confidence intervals
- **roc_curves/**: ROC curves for preterm birth classification
- **scatter_plots/**: True vs predicted gestational age scatter plots
- **biomarker_frequency/**: Biomarker selection frequency plots (regression and classification)
- **biomarker_frequency_cordvsheel/**: Biomarker frequency comparison plots between heel and cord datasets
- **summary_plots/**: Summary comparison plots across models and datasets

### Birth Weight Analysis (`birth_weight/`)
- **performance_metrics/**: MAE, RMSE, and AUC plots with confidence intervals
- **roc_curves/**: ROC curves for SGA classification
- **scatter_plots/**: True vs predicted birth weight scatter plots
- **biomarker_frequency/**: Biomarker selection frequency plots (regression and classification)
- **biomarker_frequency_cordvsheel/**: Biomarker frequency comparison plots between heel and cord datasets
- **summary_plots/**: Summary comparison plots across models and datasets

## Plot Features

All plots now include:
- **Consistent Color Schemes**: Blue (#2E86AB) for Clinical, Purple (#A23B72) for Biomarker, Orange (#F18F01) for Combined
- **Clear Legends**: Properly labeled legends with model types and datasets
- **Enhanced Visual Appeal**: Better fonts, grid lines, and annotations
- **Color Gradients**: Biomarker frequency plots use viridis colormap with colorbars
- **Statistical Annotations**: R¬≤ values, correlation coefficients, and confidence intervals
- **Professional Styling**: Bold titles, proper axis labels, and clean layouts

## Key Plot Types

1. **ROC Curves**: Show classification performance with AUC values and random classifier reference lines
2. **Performance Metrics**: Bar plots with confidence intervals for MAE, RMSE, and AUC
3. **Scatter Plots**: True vs predicted values with R¬≤ annotations and model-specific colors/markers
4. **Biomarker Frequency**: Dot plots showing feature selection frequency with color gradients
5. **Summary Plots**: Comparative analysis across different model types and datasets

## Color Legend

- **Clinical Models**: Blue (#2E86AB)
- **Biomarker Models**: Purple (#A23B72)  
- **Combined Models**: Orange (#F18F01)
- **Datasets**: Heel (circles), Cord (squares)
- **Model Types**: Lasso, ElasticNet, STABL (different colors)

All plots are generated with high resolution (300 DPI) and professional styling for publication quality.
"""
    
    with open('outputs/plots/README.md', 'w') as f:
        f.write(readme_content)
    
    print("‚úÖ README.md created successfully!")

def main():
    """Main function to organize all plots."""
    print("üöÄ Starting plot organization...")
    
    create_directory_structure()
    organize_plots()
    create_readme()
    
    print("\nüéâ All plots have been organized with improved color labeling!")
    print("üìÅ Check the organized structure in outputs/plots/")
    print("üìñ See outputs/plots/README.md for detailed information")

if __name__ == "__main__":
    main() 